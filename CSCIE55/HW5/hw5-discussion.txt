Ryan Ballenger
CSCIE55 HW5 Discussion

	Running commands outside the monitor is significantly faster than running commands inside the monitor. Specifically, commands outside the monitor achieves 4.334535 txns/msec whereas commands inside gets .873479 txns/msec. 
	This happens because commands outside the monitor enables threads to be notified, remove a command, and begin execution while others are still executing their commands. Outside commands, as Iâ€™ll call it for short, enables more processing to occur at once, since threads do not need exclusive synchronization on the queue to do command executions. The inside the monitor version, on the other hand, limits the processing to one thread at a time, because a thread needs the monitor on the queue to execute. This causes the thread that is notified and removes the command to be the only active thread, since it has the monitor, preventing any other threads from processing until it has finished. Essentially, this is equivalent to having one thread doing all the execution, which I show below.
	The point is further illustrated by comparing the number of txns/msec that each version achieves. The ratio between the with and without monitor versions is 4.334535 txns/msec/.873479 txns/msec = 4.962380. Commands outside the monitor does 5 times as many transactions, or command executions, at a time compared to inside the monitor commands. Further examination of the test file reveals that 5 threads are used in the junit test to measure the performance, which explains the ratio. Outside the monitor commands enables all 5 threads to be processing at once, whereas commands inside the monitor limits processing to one thread at a time, for the reasons discussed earlier. Since outside commands has 5 threads processing at once, where inside commands has 5 threads but only one processing at a time, the outside commands version achieves 5 times as many transaction per millisecond. These measurements and division showing outside commands does, in fact, do 5 times as many transactions supports the fact that outside commands has 5 threads executing at once and inside commands has only 1 active thread at a time. 
	The txns/msec ratio of 5 also shows that the majority of the processing time is in the command execution and not in the processing of the queue. If more time and processing were spent on the queue, the ratio would be smaller than 5, since the monitor is required to access the queue, but the ratio is nearly 5, specifically 4.9624. The synchronization during the removal of the command from the queue takes very little time, whereas the execution, which contains the millisecond sleep() discussed in the handout, is the significant task. This is useful to show that synchronizing on a queue does not slow down the command processing, and still enables a set of 5 threads to achieve nearly 5 times as many transactions compared to a single thread strategy, which in this case is the inside the monitor version.
	This example also highlights the value of using multiple threads. It shows that one thread can reach maximum processing speed while the actual processor still has capacity to do other processing. By creating and using 5 threads, several tasks can be occur simultaneously and better metrics, such as txns/millisec, can be achieved.
